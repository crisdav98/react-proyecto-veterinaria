{"version":3,"sources":["components/Header.js","components/NuevaCita.js","components/Cita.js","components/ListaCitas.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","stateinicial","cita","mascota","propietario","fecha","hora","sintomas","error","NuevaCita","state","handleChange","e","setState","target","name","value","handlesubmit","preventDefault","nuevaCita","id","uuid","props","crearNuevaCita","this","onSubmit","type","placeholder","onChange","Component","Cita","eliminarCita","onClick","ListaCitas","citas","mensaje","Object","keys","length","map","key","App","eliminarCitas","filter","datos","citasLS","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAaeA,G,MAVA,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACb,gCACE,wBAAIC,UAAU,eAAeD,M,+BCD3BE,EAAe,CACnBC,KAAM,CACJC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,IAEZC,OAAO,GA2IMC,E,2MAvIbC,M,eAAYT,G,EAEZU,aAAe,SAAAC,GAEb,EAAKC,SAAS,CACZX,KAAK,eACA,EAAKQ,MAAMR,KADZ,eAEDU,EAAEE,OAAOC,KAAQH,EAAEE,OAAOE,W,EAMjCC,aAAe,SAAAL,GACbA,EAAEM,iBADc,MAGkC,EAAKR,MAAMR,KAAtDC,EAHS,EAGTA,QAAQC,EAHC,EAGDA,YAAYC,EAHX,EAGWA,MAAMC,EAHjB,EAGiBA,KAAKC,EAHtB,EAGsBA,SAEtC,GAAe,KAAZJ,GAAkC,KAAhBC,GAA8B,KAATE,GAAwB,KAAVD,GAC3C,KAAbE,EADA,CAWA,IAAMY,EAAS,eAAO,EAAKT,MAAMR,MACjCiB,EAAUC,GAAKC,MAEf,EAAKC,MAAMC,eAAeJ,GAE1B,EAAKN,SAAL,eAAkBZ,SAdhB,EAAKY,SAAS,CACZL,OAAO,K,wEAeJ,IAECA,EAASgB,KAAKd,MAAdF,MAER,OACE,yBAAKR,UAAU,kBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,+BAAd,6CAGEQ,EAAQ,yBAAKR,UAAU,4CAAf,qCAAkG,KAC5G,0BACAyB,SAAWD,KAAKP,cAGd,yBAAKjB,UAAU,kBACb,2BAAOA,UAAU,oCAAjB,kBACkB,KAElB,yBAAKA,UAAU,sBACb,2BACE0B,KAAK,OACL1B,UAAU,eACV2B,YAAY,iBACZZ,KAAK,UACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKC,YAK7B,yBAAKH,UAAU,kBACb,2BAAOA,UAAU,oCAAjB,uBACoB,KAEpB,yBAAKA,UAAU,sBACb,2BACE0B,KAAK,OACL1B,UAAU,eACV2B,YAAY,sBACZZ,KAAK,cACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKE,gBAK7B,yBAAKJ,UAAU,kBACb,2BAAOA,UAAU,oCAAjB,UACA,yBAAKA,UAAU,qBACb,2BACC0B,KAAK,OACL1B,UAAU,eACVe,KAAK,QACLa,SAAUJ,KAAKb,aACdK,MAAOQ,KAAKd,MAAMR,KAAKG,SAG3B,2BAAOL,UAAU,oCAAjB,SACA,yBAAKA,UAAU,qBACb,2BACA0B,KAAK,OACL1B,UAAU,eACVe,KAAK,OACLa,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKI,SAM3B,yBAAKN,UAAU,kBACb,2BAAOA,UAAU,oCAAjB,eACY,KAEZ,yBAAKA,UAAU,sBACb,8BACEA,UAAU,eACVe,KAAK,WACLY,YAAY,0BACZC,SAAUJ,KAAKb,aACfK,MAAOQ,KAAKd,MAAMR,KAAKK,aAI7B,2BAAOmB,KAAK,SAAS1B,UAAU,sCAC/BgB,MAAM,8B,GA3HMa,aCcTC,EA1BF,SAAC,GAAD,IAAG5B,EAAH,EAAGA,KAAK6B,EAAR,EAAQA,aAAR,OACX,yBAAK/B,UAAU,cACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,QAAQE,EAAKC,SAC3B,uBAAGH,UAAU,aACX,uDADF,IACmCE,EAAKE,aAExC,uBAAGJ,UAAU,aACX,oDADF,IACmCE,EAAKG,OAExC,uBAAGL,UAAU,aACX,mDADF,IACkCE,EAAKI,MAEvC,uBAAGN,UAAU,aACX,+CADF,IAC2BE,EAAKK,UAEhC,4BAAQP,UAAU,iBAAiBgC,QAAS,kBAAKD,EAAa7B,EAAKkB,MAAnE,mBCQSa,EAvBI,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOH,EAAmB,EAAnBA,aAGnBI,EAAwC,IAA9BC,OAAOC,KAAKH,GAAOI,OAAe,mBAAqB,uBACvE,OACA,yBAAKtC,UAAU,kBACb,yBAAKA,UAAU,aACjB,wBAAIA,UAAU,0BAA0BmC,GACpC,yBAAKnC,UAAU,eACZkC,EAAMK,KAAI,SAAArC,GAAI,OACb,kBAAC,EAAD,CAAMsC,IAAKtC,EAAKkB,GAAIlB,KAAMA,EAAM6B,aAAcA,WC4D3CU,E,2MAlEb/B,MAAQ,CACNwB,MAAO,I,EAqBTQ,cAAgB,SAAAtB,GAEd,IAEMc,EAFa,YAAO,EAAKxB,MAAMwB,OAETS,QAAO,SAAAzC,GAAI,OAAGA,EAAKkB,KAAOA,KAGtD,EAAKP,SAAS,CACZqB,W,EAIJX,eAAiB,SAAAqB,GAEf,IAAMV,EAAM,GAAD,mBAAK,EAAKxB,MAAMwB,OAAhB,CAAsBU,IAEjC,EAAK/B,SAAS,CACZqB,MAAMA,K,mFAjCR,IAAMW,EAAUC,aAAaC,QAAQ,SAElCF,GACDrB,KAAKX,SAAS,CACZqB,MAAMc,KAAKC,MAAMJ,O,2CAQrBC,aAAaI,QAAQ,QAAQF,KAAKG,UAAU3B,KAAKd,MAAMwB,U,+BAyBvD,OACE,yBAAKlC,UAAU,aACb,kBAAC,EAAD,CACED,OAAS,wCAEX,yBAAKC,UAAU,OACb,yBAAKA,UAAU,qBACb,kBAAC,EAAD,CACEuB,eAAkBC,KAAKD,mBAI7B,yBAAKvB,UAAU,0BACb,kBAAC,EAAD,CACEkC,MAAQV,KAAKd,MAAMwB,MACnBH,aAAgBP,KAAKkB,sB,GA3Dfb,aCKEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0ffbc628.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({titulo}) => (\r\n  <header>\r\n    <h1 className=\"text-center\">{titulo}</h1>\r\n  </header>\r\n);\r\n\r\n// PropTypes es una forma de documentar nuestra aplicacion indicando que tipo de valor se pasa y si es necesario o no\r\nHeader.propTypes = {\r\n  titulo : PropTypes.string.isRequired\r\n}\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport uuid from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst stateinicial = {\r\n  cita: {\r\n    mascota: '',\r\n    propietario: '',\r\n    fecha: '',\r\n    hora: '',\r\n    sintomas: ''\r\n  },\r\n  error: false\r\n};\r\n\r\nclass NuevaCita extends Component {\r\n  state = {...stateinicial};\r\n // Cuando el usuario escribe en los inputs\r\n  handleChange = e =>{\r\n    // colocar el texto en el state\r\n    this.setState({\r\n      cita: {\r\n        ...this.state.cita,\r\n        [e.target.name] : e.target.value\r\n      }\r\n    })\r\n  }\r\n\r\n  //Cuando el ususairo envia formulairo\r\n  handlesubmit = e=>{\r\n    e.preventDefault();\r\n    // Extraer los valores del state\r\n    const {mascota,propietario,fecha,hora,sintomas} = this.state.cita;\r\n    // Validar que todos los campos esten llenos\r\n    if(mascota === '' || propietario === '' ||hora === '' ||fecha === '' ||\r\n    sintomas === ''){\r\n      this.setState({\r\n        error: true\r\n      })\r\n\r\n      // Detener la ejecución\r\n      return;\r\n    }\r\n\r\n    // generar objeto con los datos\r\n    const nuevaCita = {...this.state.cita};\r\n    nuevaCita.id = uuid();\r\n    // Agregar la cita al state del App\r\n    this.props.crearNuevaCita(nuevaCita)\r\n    // Reiniciar formulario\r\n    this.setState({...stateinicial });\r\n  }\r\n  render() {\r\n    // extraer valor del error\r\n    const { error} = this.state;\r\n\r\n    return (\r\n      <div className=\"card mt-5 py-5\">\r\n        <div className=\"card-body\">\r\n          <h2 className=\"card-title text-center mb-5\">\r\n            Llena el Formulario para agendar una cita\r\n          </h2>\r\n          { error ? <div className=\"alert alert-danger mt-5 mb-5 text-center\">TODOS LOS CAMPOS SON OBLIGATORIOS</div>:null}\r\n          <form\r\n          onSubmit= {this.handlesubmit}\r\n          >\r\n            {/* 1er campo del formulario */}\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                Nombre Mascota:{\" \"}\r\n              </label>\r\n              <div className=\"col-sm-8 col-lg-10\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre Mascota\"\r\n                  name=\"mascota\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.cita.mascota}\r\n                />\r\n              </div>\r\n            </div>\r\n            {/* 2do campo del formulario */}\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                Nombre del Dueño:{\" \"}\r\n              </label>\r\n              <div className=\"col-sm-8 col-lg-10\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Nombre del Dueño\"\r\n                  name=\"propietario\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.cita.propietario}\r\n                />\r\n              </div>\r\n            </div>\r\n            {/* 3er campo del formulario */}\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Fecha </label>\r\n              <div className=\"col-sm-8 col-lg-4\">\r\n                <input\r\n                 type=\"date\" \r\n                 className=\"form-control\" \r\n                 name=\"fecha\" \r\n                 onChange={this.handleChange}\r\n                  value={this.state.cita.fecha}/>\r\n              </div>\r\n              {/* 4to campo del formulario */}\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">Hora </label>\r\n              <div className=\"col-sm-8 col-lg-4\">\r\n                <input \r\n                type=\"time\" \r\n                className=\"form-control\"\r\n                name=\"hora\" \r\n                onChange={this.handleChange}\r\n                value={this.state.cita.hora}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* 5to campo del formulario */}\r\n            <div className=\"form-group row\">\r\n              <label className=\"col-sm-4 col-lg-2 col-form-label\">\r\n                Síntomas:{\" \"}\r\n              </label>\r\n              <div className=\"col-sm-8 col-lg-10\">\r\n                <textarea\r\n                  className=\"form-control\"\r\n                  name=\"sintomas\"\r\n                  placeholder=\"Escribe los síntomas\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.cita.sintomas}\r\n                ></textarea>\r\n              </div>\r\n            </div>\r\n            <input type=\"submit\" className=\"py-3 mt-2 btn btn-success btn-block\"\r\n            value=\"Agregar Nueva Cita\"/>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// PropTypes es una forma de documentar nuestra aplicacion indicando que tipo de valor se pasa y si es necesario o no\r\nNuevaCita.propTypes = {\r\n  crearNuevaCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default NuevaCita;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({ cita,eliminarCita }) => (\r\n  <div className=\"media mt-3\">\r\n    <div className=\"media-body\">\r\n      <h3 className=\"mt-0\">{cita.mascota}</h3>\r\n      <p className=\"card-text\">\r\n        <span>Nombre del dueño: </span> {cita.propietario}\r\n      </p>\r\n      <p className=\"card-text\">\r\n        <span>Fecha de la cita: </span> {cita.fecha}\r\n      </p>\r\n      <p className=\"card-text\">\r\n        <span>Hora de la cita: </span> {cita.hora}\r\n      </p>\r\n      <p className=\"card-text\">\r\n        <span>Síntomas: </span> {cita.sintomas}\r\n      </p>\r\n      <button className=\"btn btn-danger\" onClick={()=> eliminarCita(cita.id)}> Borrar &times;</button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// PropTypes es una forma de documentar nuestra aplicacion indicando que tipo de valor se pasa y si es necesario o no\r\nCita.propTypes = {\r\n  cita: PropTypes.object.isRequired,\r\n  eliminarCita: PropTypes.func.isRequired\r\n}\r\nexport default Cita;\r\n","import React from \"react\";\r\nimport Cita from \"./Cita.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListaCitas = ({ citas, eliminarCita }) => {\r\n    //verificar que mensaje mostrar\r\n    // con Object.keys puedo verificar si existen datos en mi arreglo de objetos\r\n    const mensaje = Object.keys(citas).length === 0 ? 'No existen citas' : 'Administra las citas';\r\n    return (\r\n    <div className=\"card mt-2 py-5\">\r\n      <div className=\"card-body\">\r\n    <h2 className=\"card-title text-center\">{mensaje}</h2>\r\n        <div className=\"lista-citas\">\r\n          {citas.map(cita => (\r\n            <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// PropTypes es una forma de documentar nuestra aplicacion indicando que tipo de valor se pasa y si es necesario o no\r\nListaCitas.propTypes = {\r\n  citas: PropTypes.array.isRequired,\r\n  eliminarCita: PropTypes.func.isRequired\r\n};\r\nexport default ListaCitas;\r\n","import React, { Component } from 'react';\nimport './bootstrap.min.css';\nimport Header from './components/Header.js';\nimport NuevaCita from './components/NuevaCita.js';\nimport ListaCitas from './components/ListaCitas.js';\n\n\nclass App extends Component {\n  state = {\n    citas: []\n  }\n  // Se ejecuta cuando la aplicacion carga\n  componentDidMount(){\n    // vamos a obtener lo que haya en el storage..\n    const citasLS = localStorage.getItem('citas');\n    // Se comprueba si existen datos en el storage o no..\n    if(citasLS){\n      this.setState({\n        citas:JSON.parse(citasLS) // Se asigna en el state lo que habia en el storage pero transformado a arreglo\n      })\n    }\n  }\n  // Cuando se actualiza el state(eliminacion o agregacion de citas)\n  // Este metodo no soporta arreglos por lo tanto debe de transformarse en string. \n  // El primer valor es el nombre de la llave y el segundo es el arrglo transformado en String\n  componentDidUpdate(){\n    localStorage.setItem('citas',JSON.stringify(this.state.citas))\n  }\n\n  // Eliminar una cita\n  eliminarCitas = id =>{\n    // Antes de modificar el state(Eliminar en este caso) se crea una copia\n    const citasActuales = [...this.state.citas];\n    // utiliza filter para sacar el id del arreglo\n    const citas = citasActuales.filter(cita =>cita.id !== id)\n    //La línea anterior retorna todos los objetos con id diferente al que se busca.. de esta manera se elimina el deseado\n    // actualizar le state \n    this.setState({\n      citas\n    })\n  }\n\n  crearNuevaCita = datos => {\n    // copiar el state actual\n    const citas=[...this.state.citas,datos];\n    // agregar nuevo state\n    this.setState({\n      citas:citas\n    }) \n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <Header\n          titulo = \"Administrador Pacientes veterinaria\"\n        />\n        <div className=\"row\">\n          <div className=\"col-md-10 mx-auto\">\n            <NuevaCita \n              crearNuevaCita = {this.crearNuevaCita}\n            />\n          </div>\n        </div>\n        <div className=\"mt-5 col-md-10 mx-auto\">\n          <ListaCitas \n            citas= {this.state.citas}\n            eliminarCita = {this.eliminarCitas}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}